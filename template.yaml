AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >-
  Iteration 3 - A simple backend (read/write to DynamoDB) with a RESTful API endpoint using Amazon API Gateway.

Globals:
  #https://github.com/awslabs/serverless-application-model/blob/develop/docs/globals.rst
  Function:
    Runtime: python3.8
    MemorySize: 256
    Timeout: 45
    Environment:
      Variables:
        TABLE_NAME: !Ref Table
        REGION_NAME: !Ref AWS::Region

Resources:
  Api3:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowOrigin: "'*'"
        AllowHeaders: "'Content-Type'"
        AllowMethods: "'OPTIONS,POST,GET'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer2
        Authorizers:
          CognitoAuthorizer2:
            UserPoolArn: !GetAtt CognitoUserPool2.Arn

  httpendpoint2:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_function3.lambda_handler
      CodeUri: src/
      Description: >-
        Iteration 3 - A simple backend (read/write to DynamoDB) with a RESTful API endpoint using Amazon API Gateway.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
      Events:
        Root:
          Type: Api
          Properties:
            RestApiId: !Ref Api3
            Path: /MyResource
            Method: GET

  CognitoUserPool2:
    Type: AWS::Cognito::UserPool
    Properties:
      Policies:
        PasswordPolicy:
          MinimumLength: 6
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false

  CognitoUserPoolClient2:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool2
      GenerateSecret: false
      PreventUserExistenceErrors: ENABLED

  Table:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: info
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
  CodeBuildIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'codebuild-sam-full-access-${AWS::Region}'
      Description: Provides Codebuild permission to access API GW, Lambda and Cloudformation
      #Provide Codebuild permission to assume this role
      AssumeRolePolicyDocument: {"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"codebuild.amazonaws.com"},"Action":"sts:AssumeRole"}]}
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaFullAccess
        - arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator
        - arn:aws:iam::aws:policy/AWSCloudFormationFullAccess
      Path: '/service-role/'
      Policies:
        - PolicyDocument: !Sub '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Resource":["arn:aws:logs:us-east-1:${AWS::AccountId}:log-group:/aws/codebuild/sam-python-hello-world","arn:aws:logs:us-east-1:${AWS::AccountId}:log-group:/aws/codebuild/sam-python-hello-world:*"],"Action":["logs:CreateLogGroup","logs:CreateLogStream","logs:PutLogEvents"]},{"Effect":"Allow","Resource":["arn:aws:s3:::codepipeline-us-east-1-*"],"Action":["s3:PutObject","s3:GetObject","s3:GetObjectVersion","s3:GetBucketAcl","s3:GetBucketLocation"]},{"Effect":"Allow","Resource":["arn:aws:s3:::sam-code-bucket-3","arn:aws:s3:::sam-code-bucket-3/*"],"Action":["s3:PutObject","s3:GetBucketAcl","s3:GetBucketLocation"]},{"Effect":"Allow","Action":["codebuild:CreateReportGroup","codebuild:CreateReport","codebuild:UpdateReport","codebuild:BatchPutTestCases"],"Resource":["arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/sam-python-it3-"]}]}'
          PolicyName: !Sub 'codebuild-access-cloudwatch-s3-${AWS::Region}'
